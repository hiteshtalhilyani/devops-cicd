# Author : Hitesh Talhilyani
- name: webapp stack setup 
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC Variable File
      include_vars:  vars/output_vars

    - name: Import EC2 Variable File
      include_vars:  vars/webappstack

    - name: Create Webapp EC2 Key 
      ec2_key:
              name: webappec2_keypair
              region: "{{region}}"
      register: webappkey_out

    - name: Save Webapp EC2 private key in pem format
      copy:
              content: "{{webappkey_out.key.private_key}}"
              dest: "./webapp-key.pem"
              mode: 0600
      when: webappkey_out.changed

    - name: Create Load Balancer Security Group 
      ec2_group:
              name: webappstack-lb
              description: Webapp Loadbalancer Security Group 
              vpc_id: "{{vpcid}}"
              region: "{{region}}"
              rules:
              - proto: tcp
                from_port: 80
                to_port: 80
                cidr_ip: 0.0.0.0/0
                rule_desc: allow port 80 from anywhere and within the security group
      register: lbsg_out

    - name: Create Webapp EC2  Security Group 
      ec2_group:
              name: ec2webappstack-sg
              description: Webapp EC2 Security Group 
              vpc_id: "{{vpcid}}"
              region: "{{region}}"
              purge_rules: no
              rules:
              - proto: tcp
                from_port: 80
                to_port: 80
                group_id: "{{lbsg_out.group_id}}"
                rule_desc: allow port 80 from Elastic LB

              - proto: tcp
                from_port: 22
                to_port: 22
                group_id: "{{BastionSGid}}"
                rule_desc: allow port 22 from Bastion Host      
      register: ec2webappsg_out  

    - name: Update Webapp EC2  Security Group 
      ec2_group:
              name: ec2webappstack-sg
              description: Webapp EC2 Security Group
              vpc_id: "{{vpcid}}"
              region: "{{region}}"
              purge_rules: no
              rules:
              - proto: all
                group_id: "{{ec2webappsg_out.group_id}}"
                rule_desc: allow all ports within in the security group

    - name: Create web01 NGINX Host in Private Subnet
      ec2:
          key_name: "webappec2_keypair"
          region: "{{region}}"
          instance_type: t2.micro
          image: "{{nginx_ami}}"
          wait: yes
          wait_timeout: 300
          vpc_subnet_id: "{{privsub1id}}"
          instance_tags:
            Name: "web01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          exact_count: 1
          count_tag: 
            Name: "web01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          group_id: "{{ec2webappsg_out.group_id}}"
      register: web01_out
    
    - name: Create Tomcat App01 Host in Private Subnet
      ec2:
          key_name: "webappec2_keypair"
          region: "{{region}}"
          instance_type: t2.micro
          image: "{{tomcat_ami}}"
          wait: yes
          wait_timeout: 300
          vpc_subnet_id: "{{privsub2id}}"
          instance_tags:
            Name: "app01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          exact_count: 1
          count_tag: 
            Name: "app01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          group_id: "{{ec2webappsg_out.group_id}}"
      register: app01_out

    - name: Create Memcache Host in Private Subnet
      ec2:
          key_name: "webappec2_keypair"
          region: "{{region}}"
          instance_type: t2.micro
          image: "{{memcache_ami}}"
          wait: yes
          wait_timeout: 300
          vpc_subnet_id: "{{privsub2id}}"
          instance_tags:
            Name: "mc01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          exact_count: 1
          count_tag: 
            Name: "mc01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          group_id: "{{ec2webappsg_out.group_id}}"
      register: mc01_out

    - name: Create RabbitMQ Host in Private Subnet
      ec2:
          key_name: "webappec2_keypair"
          region: "{{region}}"
          instance_type: t2.micro
          image: "{{rmq_ami}}"
          wait: yes
          wait_timeout: 300
          vpc_subnet_id: "{{privsub1id}}"
          instance_tags:
            Name: "rmq01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          exact_count: 1
          count_tag: 
            Name: "rmq01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          group_id: "{{ec2webappsg_out.group_id}}"
      register: rmq01_out

    - name: Create MYSQL Host in Private Subnet
      ec2:
          key_name: "webappec2_keypair"
          region: "{{region}}"
          instance_type: t2.micro
          image: "{{mysql_ami}}"
          wait: yes
          wait_timeout: 300
          vpc_subnet_id: "{{privsub2id}}"
          instance_tags:
            Name: "mysql01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          exact_count: 1
          count_tag: 
            Name: "mysql01"
            Project: Webapp
            Owner: Hitesh
            Environment: Testing
          group_id: "{{ec2webappsg_out.group_id}}"
      register: mysql01_out

    - name: Print Output of MYSQL EC2
      debug: 
        var: mysql01_out

    # Create an ALB and attach a listener
    - local_action:
        module: ec2_elb_lb
        name: "webap-elb"
        region: "{{region}}"
        state: present
        instance_ids: 
          - "{{web01_out.tagged_instances[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{lbsg_out.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners:
          - protocol: http # Required. The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/Update Host IPs & name  in provision-stack/group_vars/hostips
      blockinfile:
          path: provision-stack/group_vars/hostips
          block: |
            web01_ip: {{web01_out.tagged_instances[0].private_ip}}
            app01_ip: {{app01_out.tagged_instances[0].private_ip}}
            mc01_ip: {{mc01_out.tagged_instances[0].private_ip}}
            rmq01_ip: {{rmq01_out.tagged_instances[0].private_ip}}
            db01_ip: {{mysql01_out.tagged_instances[0].private_ip}}

    - name: Copy Login Key to provision-stack directory
      copy: 
            src: webapp-key.pem
            dest: provision-stack/webapp-key.pem
            mode: '0400'

    - name: Insert/Update Inventory file provision-stack/inventory-webapp
      blockinfile:
          path: provision-stack/inventory-webapp
          block: |
            web01 ansible_hosts={{web01_out.tagged_instances[0].private_ip}}
            app01p ansible_hosts={{app01_out.tagged_instances[0].private_ip}}
            mc01p ansible_hosts={{mc01_out.tagged_instances[0].private_ip}}
            rmq01 ansible_hosts={{rmq01_out.tagged_instances[0].private_ip}}
            db01 ansible_hosts={{mysql01_out.tagged_instances[0].private_ip}}
            cntl ansible_hosts=127.0.0.1 ansible_connection=local

            [websrvgrp]
            web01

            [appsrvgrp]
            app01

            [rmqsrvgrp]
            rmq01

            [mcsrvgrp]
            mc01

            [dbsrvgrp]
            db01

            [control]
            cntl

            [stack_inst:children]
            websrvgrp
            appsrvgrp
            rmqsrvgrp
            mcsrvgrp

            [stack_inst:vars]
            ansible_user:ubuntu
            ansible_ssh_private_key_file=webapp-key.pem










    
        

